version: '3.9'
services:
  redis_db:
    extends:
      file: ./docker-compose/services/redis.yml
      service: redis_db

  db-init:
    extends:
      file: ./docker-compose/services/db.yml
      service: db-init

  db:
    depends_on:
      db-init:
        condition: service_completed_successfully
    extends:
      file: ./docker-compose/services/db.yml
      service: db

  backend:
    depends_on:
      - db
      - redis_db
    extends:
      file: ./docker-compose/services/backend.yml
      service: backend
    links:
      - db:database
    environment:
        CHAIN_TYPE: "arbitrum"
        ETHEREUM_JSONRPC_HTTP_URL: http://full-node:8451/
        ETHEREUM_JSONRPC_TRACE_URL: http://full-node:8451/
        INDEXER_DISABLE_PENDING_TRANSACTIONS_FETCHER: "true"

  visualizer:
    extends:
      file: ./docker-compose/services/visualizer.yml
      service: visualizer

  sig-provider:
    extends:
      file: ./docker-compose/services/sig-provider.yml
      service: sig-provider

  frontend:
    depends_on:
      - backend
    extends:
      file: ./docker-compose/services/frontend.yml
      service: frontend
    environment:
      NEXT_PUBLIC_NETWORK_NAME: "Arbitrum Orbit Moonlight"
      NEXT_PUBLIC_NETWORK_SHORT_NAME: "Moonlight"
      NEXT_PUBLIC_AD_BANNER_PROVIDER: "none"
      NEXT_PUBLIC_NETWORK_RPC_URL: http://full-node:8451/

  stats-db-init:
    extends:
      file: ./docker-compose/services/stats.yml
      service: stats-db-init

  stats-db:
    depends_on:
      stats-db-init:
        condition: service_completed_successfully
    extends:
      file: ./docker-compose/services/stats.yml
      service: stats-db

  stats:
    depends_on:
      - stats-db
      - backend
    extends:
      file: ./docker-compose/services/stats.yml
      service: stats

  proxy:
    depends_on:
      - backend
      - frontend
      - stats
    extends:
      file: ./docker-compose/services/nginx.yml
      service: proxy

  # Sequencer
  sequencer:
    image: offchainlabs/nitro-node:v3.4.0-d896e9c
    container_name: sequencer
    ports:
      - "8449:8449"
      - "9000:9000"
    volumes:
      - "./config-sequencer:/home/user/.arbitrum"
    command: --conf.file /home/user/.arbitrum/nodeConfig.json

  # Batch poster 
  batch-poster:
    image: offchainlabs/nitro-node:v3.4.0-d896e9c
    container_name: batch-poster
    volumes:
      - "./config-batch-poster:/home/user/.arbitrum"
    command: --node.batch-poster.parent-chain-wallet.private-key ${BATCH_POSTER_PRIVATE_KEY} --conf.file /home/user/.arbitrum/nodeConfig.json

  # Simple nitro node (no archiving, subscribed to sequencer feed)
  simple-node:
    image: offchainlabs/nitro-node:v3.4.0-d896e9c
    container_name: simple-node
    ports:
      - "8450:8450"
    volumes:
      - "./config-simple-node:/home/user/.arbitrum"
    command: --conf.file /home/user/.arbitrum/nodeConfig.json

  # Full node (archive and sequencer feed)
  full-node:
    image: offchainlabs/nitro-node:v3.4.0-d896e9c
    container_name: full-node
    ports:
      - "8451:8451"
    volumes:
      - "./config-full-node:/home/user/.arbitrum"
    command: --conf.file /home/user/.arbitrum/nodeConfig.json

  # Validator node
  validator:
    image: offchainlabs/nitro-node:v3.4.0-d896e9c
    container_name: validator
    volumes:
    - "./config-validator:/home/user/.arbitrum"
    command: --node.staker.parent-chain-wallet.private-key ${VALIDATOR_PRIVATE_KEY} --conf.file /home/user/.arbitrum/nodeConfig.json

  # Main DAS instance
  main-das-server:
    image: offchainlabs/nitro-node:v3.4.0-d896e9c
    container_name: main-das-server
    entrypoint: [ "/bin/bash", "/main-das-server.sh" ]
    volumes:
      - "./config:/home/user/.arbitrum"
      - "./main-das-server.sh:/main-das-server.sh"
      - "./das-data:/home/user/das-data"
    ports:
      - "9876:9876" # RPC
      - "9877:9877" # REST

  # Mirror DAS instance
  mirror-das-server:
    image: offchainlabs/nitro-node:v3.4.0-d896e9c
    depends_on:
      - main-das-server
    container_name: mirror-das-server
    entrypoint: [ "/bin/bash", "/mirror-das-server.sh" ]
    volumes:
      - "./config:/home/user/.arbitrum"
      - "./mirror-das-server.sh:/mirror-das-server.sh"
      - "./mirror-das-data:/home/user/das-data"
      - "./mirror-das-data/syncState:/home/user/syncState"
    ports:
      - "9878:9878"